# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from lqrrt_ros/MoveGoal.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg

class MoveGoal(genpy.Message):
  _md5sum = "28ef4b28cd3586cf6002e8b5bf1dc40f"
  _type = "lqrrt_ros/MoveGoal"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
# Goal

string move_type  # 'hold', 'drive', 'drive!', 'skid', 'spiral', 'bypass'
geometry_msgs/Pose goal
geometry_msgs/Point focus
float64 initial_plan_time
bool blind
float64[] speed_factor


================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of position and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w
"""
  __slots__ = ['move_type','goal','focus','initial_plan_time','blind','speed_factor']
  _slot_types = ['string','geometry_msgs/Pose','geometry_msgs/Point','float64','bool','float64[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       move_type,goal,focus,initial_plan_time,blind,speed_factor

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(MoveGoal, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.move_type is None:
        self.move_type = ''
      if self.goal is None:
        self.goal = geometry_msgs.msg.Pose()
      if self.focus is None:
        self.focus = geometry_msgs.msg.Point()
      if self.initial_plan_time is None:
        self.initial_plan_time = 0.
      if self.blind is None:
        self.blind = False
      if self.speed_factor is None:
        self.speed_factor = []
    else:
      self.move_type = ''
      self.goal = geometry_msgs.msg.Pose()
      self.focus = geometry_msgs.msg.Point()
      self.initial_plan_time = 0.
      self.blind = False
      self.speed_factor = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.move_type
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_11dB().pack(_x.goal.position.x, _x.goal.position.y, _x.goal.position.z, _x.goal.orientation.x, _x.goal.orientation.y, _x.goal.orientation.z, _x.goal.orientation.w, _x.focus.x, _x.focus.y, _x.focus.z, _x.initial_plan_time, _x.blind))
      length = len(self.speed_factor)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.speed_factor))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.goal is None:
        self.goal = geometry_msgs.msg.Pose()
      if self.focus is None:
        self.focus = geometry_msgs.msg.Point()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.move_type = str[start:end].decode('utf-8')
      else:
        self.move_type = str[start:end]
      _x = self
      start = end
      end += 89
      (_x.goal.position.x, _x.goal.position.y, _x.goal.position.z, _x.goal.orientation.x, _x.goal.orientation.y, _x.goal.orientation.z, _x.goal.orientation.w, _x.focus.x, _x.focus.y, _x.focus.z, _x.initial_plan_time, _x.blind,) = _get_struct_11dB().unpack(str[start:end])
      self.blind = bool(self.blind)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.speed_factor = struct.unpack(pattern, str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.move_type
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_11dB().pack(_x.goal.position.x, _x.goal.position.y, _x.goal.position.z, _x.goal.orientation.x, _x.goal.orientation.y, _x.goal.orientation.z, _x.goal.orientation.w, _x.focus.x, _x.focus.y, _x.focus.z, _x.initial_plan_time, _x.blind))
      length = len(self.speed_factor)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.speed_factor.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.goal is None:
        self.goal = geometry_msgs.msg.Pose()
      if self.focus is None:
        self.focus = geometry_msgs.msg.Point()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.move_type = str[start:end].decode('utf-8')
      else:
        self.move_type = str[start:end]
      _x = self
      start = end
      end += 89
      (_x.goal.position.x, _x.goal.position.y, _x.goal.position.z, _x.goal.orientation.x, _x.goal.orientation.y, _x.goal.orientation.z, _x.goal.orientation.w, _x.focus.x, _x.focus.y, _x.focus.z, _x.initial_plan_time, _x.blind,) = _get_struct_11dB().unpack(str[start:end])
      self.blind = bool(self.blind)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.speed_factor = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_11dB = None
def _get_struct_11dB():
    global _struct_11dB
    if _struct_11dB is None:
        _struct_11dB = struct.Struct("<11dB")
    return _struct_11dB
