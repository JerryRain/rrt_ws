;; Auto-generated. Do not edit!


(when (boundp 'lqrrt_ros::MoveGoal)
  (if (not (find-package "LQRRT_ROS"))
    (make-package "LQRRT_ROS"))
  (shadow 'MoveGoal (find-package "LQRRT_ROS")))
(unless (find-package "LQRRT_ROS::MOVEGOAL")
  (make-package "LQRRT_ROS::MOVEGOAL"))

(in-package "ROS")
;;//! \htmlinclude MoveGoal.msg.html
(if (not (find-package "GEOMETRY_MSGS"))
  (ros::roseus-add-msgs "geometry_msgs"))


(defclass lqrrt_ros::MoveGoal
  :super ros::object
  :slots (_move_type _goal _focus _initial_plan_time _blind _speed_factor ))

(defmethod lqrrt_ros::MoveGoal
  (:init
   (&key
    ((:move_type __move_type) "")
    ((:goal __goal) (instance geometry_msgs::Pose :init))
    ((:focus __focus) (instance geometry_msgs::Point :init))
    ((:initial_plan_time __initial_plan_time) 0.0)
    ((:blind __blind) nil)
    ((:speed_factor __speed_factor) (make-array 0 :initial-element 0.0 :element-type :float))
    )
   (send-super :init)
   (setq _move_type (string __move_type))
   (setq _goal __goal)
   (setq _focus __focus)
   (setq _initial_plan_time (float __initial_plan_time))
   (setq _blind __blind)
   (setq _speed_factor __speed_factor)
   self)
  (:move_type
   (&optional __move_type)
   (if __move_type (setq _move_type __move_type)) _move_type)
  (:goal
   (&rest __goal)
   (if (keywordp (car __goal))
       (send* _goal __goal)
     (progn
       (if __goal (setq _goal (car __goal)))
       _goal)))
  (:focus
   (&rest __focus)
   (if (keywordp (car __focus))
       (send* _focus __focus)
     (progn
       (if __focus (setq _focus (car __focus)))
       _focus)))
  (:initial_plan_time
   (&optional __initial_plan_time)
   (if __initial_plan_time (setq _initial_plan_time __initial_plan_time)) _initial_plan_time)
  (:blind
   (&optional __blind)
   (if __blind (setq _blind __blind)) _blind)
  (:speed_factor
   (&optional __speed_factor)
   (if __speed_factor (setq _speed_factor __speed_factor)) _speed_factor)
  (:serialization-length
   ()
   (+
    ;; string _move_type
    4 (length _move_type)
    ;; geometry_msgs/Pose _goal
    (send _goal :serialization-length)
    ;; geometry_msgs/Point _focus
    (send _focus :serialization-length)
    ;; float64 _initial_plan_time
    8
    ;; bool _blind
    1
    ;; float64[] _speed_factor
    (* 8    (length _speed_factor)) 4
    ))
  (:serialize
   (&optional strm)
   (let ((s (if strm strm
              (make-string-output-stream (send self :serialization-length)))))
     ;; string _move_type
       (write-long (length _move_type) s) (princ _move_type s)
     ;; geometry_msgs/Pose _goal
       (send _goal :serialize s)
     ;; geometry_msgs/Point _focus
       (send _focus :serialize s)
     ;; float64 _initial_plan_time
       (sys::poke _initial_plan_time (send s :buffer) (send s :count) :double) (incf (stream-count s) 8)
     ;; bool _blind
       (if _blind (write-byte -1 s) (write-byte 0 s))
     ;; float64[] _speed_factor
     (write-long (length _speed_factor) s)
     (dotimes (i (length _speed_factor))
       (sys::poke (elt _speed_factor i) (send s :buffer) (send s :count) :double) (incf (stream-count s) 8)
       )
     ;;
     (if (null strm) (get-output-stream-string s))))
  (:deserialize
   (buf &optional (ptr- 0))
   ;; string _move_type
     (let (n) (setq n (sys::peek buf ptr- :integer)) (incf ptr- 4) (setq _move_type (subseq buf ptr- (+ ptr- n))) (incf ptr- n))
   ;; geometry_msgs/Pose _goal
     (send _goal :deserialize buf ptr-) (incf ptr- (send _goal :serialization-length))
   ;; geometry_msgs/Point _focus
     (send _focus :deserialize buf ptr-) (incf ptr- (send _focus :serialization-length))
   ;; float64 _initial_plan_time
     (setq _initial_plan_time (sys::peek buf ptr- :double)) (incf ptr- 8)
   ;; bool _blind
     (setq _blind (not (= 0 (sys::peek buf ptr- :char)))) (incf ptr- 1)
   ;; float64[] _speed_factor
   (let (n)
     (setq n (sys::peek buf ptr- :integer)) (incf ptr- 4)
     (setq _speed_factor (instantiate float-vector n))
     (dotimes (i n)
     (setf (elt _speed_factor i) (sys::peek buf ptr- :double)) (incf ptr- 8)
     ))
   ;;
   self)
  )

(setf (get lqrrt_ros::MoveGoal :md5sum-) "28ef4b28cd3586cf6002e8b5bf1dc40f")
(setf (get lqrrt_ros::MoveGoal :datatype-) "lqrrt_ros/MoveGoal")
(setf (get lqrrt_ros::MoveGoal :definition-)
      "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
# Goal

string move_type  # 'hold', 'drive', 'drive!', 'skid', 'spiral', 'bypass'
geometry_msgs/Pose goal
geometry_msgs/Point focus
float64 initial_plan_time
bool blind
float64[] speed_factor


================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of position and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

")



(provide :lqrrt_ros/MoveGoal "28ef4b28cd3586cf6002e8b5bf1dc40f")


