;; Auto-generated. Do not edit!


(when (boundp 'lqrrt_ros::MoveFeedback)
  (if (not (find-package "LQRRT_ROS"))
    (make-package "LQRRT_ROS"))
  (shadow 'MoveFeedback (find-package "LQRRT_ROS")))
(unless (find-package "LQRRT_ROS::MOVEFEEDBACK")
  (make-package "LQRRT_ROS::MOVEFEEDBACK"))

(in-package "ROS")
;;//! \htmlinclude MoveFeedback.msg.html


(defclass lqrrt_ros::MoveFeedback
  :super ros::object
  :slots (_behavior _tree_size _tracking _distance _time_till_next_branch ))

(defmethod lqrrt_ros::MoveFeedback
  (:init
   (&key
    ((:behavior __behavior) "")
    ((:tree_size __tree_size) 0)
    ((:tracking __tracking) nil)
    ((:distance __distance) (make-array 0 :initial-element 0.0 :element-type :float))
    ((:time_till_next_branch __time_till_next_branch) 0.0)
    )
   (send-super :init)
   (setq _behavior (string __behavior))
   (setq _tree_size (round __tree_size))
   (setq _tracking __tracking)
   (setq _distance __distance)
   (setq _time_till_next_branch (float __time_till_next_branch))
   self)
  (:behavior
   (&optional __behavior)
   (if __behavior (setq _behavior __behavior)) _behavior)
  (:tree_size
   (&optional __tree_size)
   (if __tree_size (setq _tree_size __tree_size)) _tree_size)
  (:tracking
   (&optional __tracking)
   (if __tracking (setq _tracking __tracking)) _tracking)
  (:distance
   (&optional __distance)
   (if __distance (setq _distance __distance)) _distance)
  (:time_till_next_branch
   (&optional __time_till_next_branch)
   (if __time_till_next_branch (setq _time_till_next_branch __time_till_next_branch)) _time_till_next_branch)
  (:serialization-length
   ()
   (+
    ;; string _behavior
    4 (length _behavior)
    ;; int64 _tree_size
    8
    ;; bool _tracking
    1
    ;; float64[] _distance
    (* 8    (length _distance)) 4
    ;; float64 _time_till_next_branch
    8
    ))
  (:serialize
   (&optional strm)
   (let ((s (if strm strm
              (make-string-output-stream (send self :serialization-length)))))
     ;; string _behavior
       (write-long (length _behavior) s) (princ _behavior s)
     ;; int64 _tree_size
#+(or :alpha :irix6 :x86_64)
       (progn (sys::poke _tree_size (send s :buffer) (send s :count) :long) (incf (stream-count s) 8))
#-(or :alpha :irix6 :x86_64)
       (cond ((and (class _tree_size) (= (length (_tree_size . bv)) 2)) ;; bignum
              (write-long (ash (elt (_tree_size . bv) 0) 0) s)
              (write-long (ash (elt (_tree_size . bv) 1) -1) s))
             ((and (class _tree_size) (= (length (_tree_size . bv)) 1)) ;; big1
              (write-long (elt (_tree_size . bv) 0) s)
              (write-long (if (>= _tree_size 0) 0 #xffffffff) s))
             (t                                         ;; integer
              (write-long _tree_size s)(write-long (if (>= _tree_size 0) 0 #xffffffff) s)))
     ;; bool _tracking
       (if _tracking (write-byte -1 s) (write-byte 0 s))
     ;; float64[] _distance
     (write-long (length _distance) s)
     (dotimes (i (length _distance))
       (sys::poke (elt _distance i) (send s :buffer) (send s :count) :double) (incf (stream-count s) 8)
       )
     ;; float64 _time_till_next_branch
       (sys::poke _time_till_next_branch (send s :buffer) (send s :count) :double) (incf (stream-count s) 8)
     ;;
     (if (null strm) (get-output-stream-string s))))
  (:deserialize
   (buf &optional (ptr- 0))
   ;; string _behavior
     (let (n) (setq n (sys::peek buf ptr- :integer)) (incf ptr- 4) (setq _behavior (subseq buf ptr- (+ ptr- n))) (incf ptr- n))
   ;; int64 _tree_size
#+(or :alpha :irix6 :x86_64)
      (setf _tree_size (prog1 (sys::peek buf ptr- :long) (incf ptr- 8)))
#-(or :alpha :irix6 :x86_64)
      (setf _tree_size (let ((b0 (prog1 (sys::peek buf ptr- :integer) (incf ptr- 4)))
                  (b1 (prog1 (sys::peek buf ptr- :integer) (incf ptr- 4))))
              (cond ((= b1 -1) b0)
                     ((and (= b1  0)
                           (<= lisp::most-negative-fixnum b0 lisp::most-positive-fixnum))
                      b0)
                    ((= b1  0) (make-instance bignum :size 1 :bv (integer-vector b0)))
                    (t (make-instance bignum :size 2 :bv (integer-vector b0 (ash b1 1)))))))
   ;; bool _tracking
     (setq _tracking (not (= 0 (sys::peek buf ptr- :char)))) (incf ptr- 1)
   ;; float64[] _distance
   (let (n)
     (setq n (sys::peek buf ptr- :integer)) (incf ptr- 4)
     (setq _distance (instantiate float-vector n))
     (dotimes (i n)
     (setf (elt _distance i) (sys::peek buf ptr- :double)) (incf ptr- 8)
     ))
   ;; float64 _time_till_next_branch
     (setq _time_till_next_branch (sys::peek buf ptr- :double)) (incf ptr- 8)
   ;;
   self)
  )

(setf (get lqrrt_ros::MoveFeedback :md5sum-) "9406c8b108b277e4eb75c321d48ddcc4")
(setf (get lqrrt_ros::MoveFeedback :datatype-) "lqrrt_ros/MoveFeedback")
(setf (get lqrrt_ros::MoveFeedback :definition-)
      "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
# Feedback

string behavior
int64 tree_size
bool tracking
float64[] distance
float64 time_till_next_branch


")



(provide :lqrrt_ros/MoveFeedback "9406c8b108b277e4eb75c321d48ddcc4")


