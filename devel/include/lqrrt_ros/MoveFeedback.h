// Generated by gencpp from file lqrrt_ros/MoveFeedback.msg
// DO NOT EDIT!


#ifndef LQRRT_ROS_MESSAGE_MOVEFEEDBACK_H
#define LQRRT_ROS_MESSAGE_MOVEFEEDBACK_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace lqrrt_ros
{
template <class ContainerAllocator>
struct MoveFeedback_
{
  typedef MoveFeedback_<ContainerAllocator> Type;

  MoveFeedback_()
    : behavior()
    , tree_size(0)
    , tracking(false)
    , distance()
    , time_till_next_branch(0.0)  {
    }
  MoveFeedback_(const ContainerAllocator& _alloc)
    : behavior(_alloc)
    , tree_size(0)
    , tracking(false)
    , distance(_alloc)
    , time_till_next_branch(0.0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _behavior_type;
  _behavior_type behavior;

   typedef int64_t _tree_size_type;
  _tree_size_type tree_size;

   typedef uint8_t _tracking_type;
  _tracking_type tracking;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _distance_type;
  _distance_type distance;

   typedef double _time_till_next_branch_type;
  _time_till_next_branch_type time_till_next_branch;





  typedef boost::shared_ptr< ::lqrrt_ros::MoveFeedback_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::lqrrt_ros::MoveFeedback_<ContainerAllocator> const> ConstPtr;

}; // struct MoveFeedback_

typedef ::lqrrt_ros::MoveFeedback_<std::allocator<void> > MoveFeedback;

typedef boost::shared_ptr< ::lqrrt_ros::MoveFeedback > MoveFeedbackPtr;
typedef boost::shared_ptr< ::lqrrt_ros::MoveFeedback const> MoveFeedbackConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::lqrrt_ros::MoveFeedback_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::lqrrt_ros::MoveFeedback_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace lqrrt_ros

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'nav_msgs': ['/opt/ros/kinetic/share/nav_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/kinetic/share/actionlib_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'lqrrt_ros': ['/home/jerryrain/rrt_ws/devel/share/lqrrt_ros/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::lqrrt_ros::MoveFeedback_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::lqrrt_ros::MoveFeedback_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::lqrrt_ros::MoveFeedback_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::lqrrt_ros::MoveFeedback_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::lqrrt_ros::MoveFeedback_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::lqrrt_ros::MoveFeedback_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::lqrrt_ros::MoveFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "9406c8b108b277e4eb75c321d48ddcc4";
  }

  static const char* value(const ::lqrrt_ros::MoveFeedback_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x9406c8b108b277e4ULL;
  static const uint64_t static_value2 = 0xeb75c321d48ddcc4ULL;
};

template<class ContainerAllocator>
struct DataType< ::lqrrt_ros::MoveFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "lqrrt_ros/MoveFeedback";
  }

  static const char* value(const ::lqrrt_ros::MoveFeedback_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::lqrrt_ros::MoveFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\
# Feedback\n\
\n\
string behavior\n\
int64 tree_size\n\
bool tracking\n\
float64[] distance\n\
float64 time_till_next_branch\n\
\n\
";
  }

  static const char* value(const ::lqrrt_ros::MoveFeedback_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::lqrrt_ros::MoveFeedback_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.behavior);
      stream.next(m.tree_size);
      stream.next(m.tracking);
      stream.next(m.distance);
      stream.next(m.time_till_next_branch);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MoveFeedback_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::lqrrt_ros::MoveFeedback_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::lqrrt_ros::MoveFeedback_<ContainerAllocator>& v)
  {
    s << indent << "behavior: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.behavior);
    s << indent << "tree_size: ";
    Printer<int64_t>::stream(s, indent + "  ", v.tree_size);
    s << indent << "tracking: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.tracking);
    s << indent << "distance[]" << std::endl;
    for (size_t i = 0; i < v.distance.size(); ++i)
    {
      s << indent << "  distance[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.distance[i]);
    }
    s << indent << "time_till_next_branch: ";
    Printer<double>::stream(s, indent + "  ", v.time_till_next_branch);
  }
};

} // namespace message_operations
} // namespace ros

#endif // LQRRT_ROS_MESSAGE_MOVEFEEDBACK_H
