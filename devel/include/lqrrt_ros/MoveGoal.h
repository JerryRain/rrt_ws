// Generated by gencpp from file lqrrt_ros/MoveGoal.msg
// DO NOT EDIT!


#ifndef LQRRT_ROS_MESSAGE_MOVEGOAL_H
#define LQRRT_ROS_MESSAGE_MOVEGOAL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Pose.h>
#include <geometry_msgs/Point.h>

namespace lqrrt_ros
{
template <class ContainerAllocator>
struct MoveGoal_
{
  typedef MoveGoal_<ContainerAllocator> Type;

  MoveGoal_()
    : move_type()
    , goal()
    , focus()
    , initial_plan_time(0.0)
    , blind(false)
    , speed_factor()  {
    }
  MoveGoal_(const ContainerAllocator& _alloc)
    : move_type(_alloc)
    , goal(_alloc)
    , focus(_alloc)
    , initial_plan_time(0.0)
    , blind(false)
    , speed_factor(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _move_type_type;
  _move_type_type move_type;

   typedef  ::geometry_msgs::Pose_<ContainerAllocator>  _goal_type;
  _goal_type goal;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _focus_type;
  _focus_type focus;

   typedef double _initial_plan_time_type;
  _initial_plan_time_type initial_plan_time;

   typedef uint8_t _blind_type;
  _blind_type blind;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _speed_factor_type;
  _speed_factor_type speed_factor;





  typedef boost::shared_ptr< ::lqrrt_ros::MoveGoal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::lqrrt_ros::MoveGoal_<ContainerAllocator> const> ConstPtr;

}; // struct MoveGoal_

typedef ::lqrrt_ros::MoveGoal_<std::allocator<void> > MoveGoal;

typedef boost::shared_ptr< ::lqrrt_ros::MoveGoal > MoveGoalPtr;
typedef boost::shared_ptr< ::lqrrt_ros::MoveGoal const> MoveGoalConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::lqrrt_ros::MoveGoal_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::lqrrt_ros::MoveGoal_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace lqrrt_ros

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'nav_msgs': ['/opt/ros/kinetic/share/nav_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/kinetic/share/actionlib_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'lqrrt_ros': ['/home/jerryrain/rrt_ws/devel/share/lqrrt_ros/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::lqrrt_ros::MoveGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::lqrrt_ros::MoveGoal_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::lqrrt_ros::MoveGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::lqrrt_ros::MoveGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::lqrrt_ros::MoveGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::lqrrt_ros::MoveGoal_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::lqrrt_ros::MoveGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "28ef4b28cd3586cf6002e8b5bf1dc40f";
  }

  static const char* value(const ::lqrrt_ros::MoveGoal_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x28ef4b28cd3586cfULL;
  static const uint64_t static_value2 = 0x6002e8b5bf1dc40fULL;
};

template<class ContainerAllocator>
struct DataType< ::lqrrt_ros::MoveGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "lqrrt_ros/MoveGoal";
  }

  static const char* value(const ::lqrrt_ros::MoveGoal_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::lqrrt_ros::MoveGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\
# Goal\n\
\n\
string move_type  # 'hold', 'drive', 'drive!', 'skid', 'spiral', 'bypass'\n\
geometry_msgs/Pose goal\n\
geometry_msgs/Point focus\n\
float64 initial_plan_time\n\
bool blind\n\
float64[] speed_factor\n\
\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Pose\n\
# A representation of pose in free space, composed of position and orientation. \n\
Point position\n\
Quaternion orientation\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
";
  }

  static const char* value(const ::lqrrt_ros::MoveGoal_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::lqrrt_ros::MoveGoal_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.move_type);
      stream.next(m.goal);
      stream.next(m.focus);
      stream.next(m.initial_plan_time);
      stream.next(m.blind);
      stream.next(m.speed_factor);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MoveGoal_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::lqrrt_ros::MoveGoal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::lqrrt_ros::MoveGoal_<ContainerAllocator>& v)
  {
    s << indent << "move_type: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.move_type);
    s << indent << "goal: ";
    s << std::endl;
    Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "  ", v.goal);
    s << indent << "focus: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.focus);
    s << indent << "initial_plan_time: ";
    Printer<double>::stream(s, indent + "  ", v.initial_plan_time);
    s << indent << "blind: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.blind);
    s << indent << "speed_factor[]" << std::endl;
    for (size_t i = 0; i < v.speed_factor.size(); ++i)
    {
      s << indent << "  speed_factor[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.speed_factor[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // LQRRT_ROS_MESSAGE_MOVEGOAL_H
